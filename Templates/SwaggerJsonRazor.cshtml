@using System.Text.Json;
@using System.Text.RegularExpressions;
@{
    var gen = Model as swagger2js_cli.Models.SwaggerModel;
    var paramsString = "params";
    var getFnString = "getFn";
    var postFnString = "postFn";
    var putFnString = "putFn";
    var deleteFnString = "deleteFn";
    var matchPathParameterPattern = @"({(\w*)})";
    var endLoadingFn = ", loadingFn";
    var hasEndLoadingFn = false;
    Func<string, object, object> GetTypeDefaultValue = (type, _default) =>
    {
        if (_default != null)
        {
            return _default;
        }
        switch (type)
        {
            case "string":
                return "";
            case "integer":
                return 0;
            case "number":
                return 0.0;
            case "array":
                return new List<object>();
            default:
                return "";
        }
    };

    Func<string, object, object> GetTypeDefaultJsonValue = (type, _default) =>
    {
        if (_default != null) return JsonSerializer.Serialize(_default);
        switch (type)
        {
            case "string":
                return "\"\"";
            case "integer":
                return 0;
            case "number":
                return 0.0;
            case "array":
                return "[]";
            default:
                return "\"\"";
        }
    };

    Func<string, string> GetParams = name =>
    {
        var res = "";
        var dto = gen.components.schemas[name];
        var p = dto?.properties;
        if (p == null) return res;
        var dic = new Dictionary<string, object>();
        var keys = p.Keys;
        foreach (var key in keys)
        {
            object value = null;
            value = GetTypeDefaultValue(p[key].type, null);
            dic.Add(key, value);
        }
        res = JsonSerializer.Serialize(dic).Replace("\\", "").Replace("&quot;", "\"");
        return res;
    };

    //获取请求类型
    Func<Dictionary<string, swagger2js_cli.Models.PathModel>, List<string>> FnNames = pathModel =>
    {
        return pathModel.Values.Select(p =>
        {
            if (p.get != null) return getFnString;
            else if (p.post != null) return postFnString;
            else if (p.put != null) return putFnString;
            else if (p.delete != null) return deleteFnString;
            return "";
        }).Distinct().ToList();
    };

    Func<string, (string matchedName, string matchedUrl)> GetMatchPathName = path =>
    {
        Dictionary<string, string> matchKeyValueDic = new Dictionary<string, string>();
        string matchedUrl = path;
        Regex r = new Regex(matchPathParameterPattern);
        string pathName = r.Replace(path, rs =>
        {
            if (rs.Success && rs.Groups.Count > 0)
            {
                var matchValue = rs.Groups[rs.Groups.Count - 1].Value;
                matchedUrl = matchedUrl.Replace(rs.Value, "$" + rs.Value).Replace(matchValue, paramsString + "." + matchValue);
                return matchValue;
            };
            return rs.Value;
        });
        return (pathName, matchedUrl);
    };
}
import {@string.Join(", ", FnNames(gen.paths))} from "./api";

export default {
@foreach (var path in gen.paths.Keys)
{
    var name = @path;

    var matchedPathParamPath = "";
    //判断name中是否有path参数
    if (name.IndexOf("{") > -1)
    {
        var matchValue = GetMatchPathName(@path);
        name = matchValue.matchedName;
        matchedPathParamPath = matchValue.matchedUrl;
    }
    name = name.Replace("/api/", "");
    var nameList = name.Split("/").ToList();
    nameList.Remove(nameList[0]);
    name = string.Join("_", nameList);
    if (name.StartsWith("_")) name = name.Substring(1);
    name = name.First().ToString().ToLower() + name.Substring(1);
    var methodName = "";
    var summary = "";
    var paramDto = "";


    swagger2js_cli.Models.Post otherPathValue = null;
    if (gen.paths[path].post != null) otherPathValue = gen.paths[path].post;
    else if (gen.paths[path].put != null) otherPathValue = gen.paths[path].put;
    else if (gen.paths[path].delete != null) otherPathValue = gen.paths[path].delete;
    if (gen.paths[path].get != null)
    {
        methodName = getFnString;
        summary = gen.paths[path].get.summary?.Replace("\r\n", " ");
        var parameters = gen.paths[path].get.parameters;
        Dictionary<string, object> paramDic = new Dictionary<string, object>();
        if (parameters != null && parameters.Length > 0)
        {
            foreach (var p in parameters)
            {
                var value = GetTypeDefaultValue(p.schema.type, p.schema._default);
                paramDic.Add(p.name, value);
            }
            if (paramDic.Count > 0)
            {
                paramDto = JsonSerializer.Serialize(paramDic);
            }
        }

        <text>  //0 @summary</text>
        <text>  @name: (@if (paramDto != "")
        {<text>@paramsString=@paramDto</text>}
    else
    { @paramsString }@if (hasEndLoadingFn){<text>@endLoadingFn</text>})=>@methodName (@if (matchedPathParamPath == ""){<text>"@path"</text>}
    else
    { <text>`@matchedPathParamPath`</text>},@paramsString @if (hasEndLoadingFn)
    {<text>endLoadingFn</text>}),</text> 
    <text></text>
    }
    else if (otherPathValue != null)
    {
        methodName = postFnString;
        summary = otherPathValue.summary?.Replace("\r\n", " ");
        var _ref = otherPathValue.requestBody?.content?.application_json?.schema?._ref;
        if (_ref != null)
        {
            var dtoNameList = _ref.Split("/");
            var dtoName = dtoNameList[dtoNameList.Length - 1];
            paramDto = GetParams(dtoName);
        }

        var postParams = otherPathValue.parameters;
        if (postParams != null && postParams.Length > 0)
        {
            //queryParams in query
            var methodQueryParams = postParams.Where(p => p._in == "query").Select(p => p.name + "=" + GetTypeDefaultJsonValue(p.schema.type, p.schema._default)).ToList();
            var methodQueryPath = postParams.Where(p => p._in == "query").Select(p => p.name + "=" + "\"+" + p.name + "+\"").ToList();
        <text>  //1 @summary</text>
        <text>  @name: (@if (paramDto != "")
        {<text>@paramsString=@paramDto</text>}
    else
    { <text>@paramsString</text>},@string.Join(',', methodQueryParams)@if (hasEndLoadingFn)
    {<text>@endLoadingFn</text>})=>@methodName ("@path?@string.Join('&', methodQueryPath)",@paramsString@if (hasEndLoadingFn)
    {<text>@endLoadingFn</text>}),</text>
    <text></text>
}
else
{
    <text>  //2 @summary</text>
    <text>  @name: (@if (paramDto != "")
    {<text>@paramsString=@paramDto</text>}
else
{ <text>@paramsString</text>}@if (hasEndLoadingFn)
    {<text>@endLoadingFn</text>})=>@methodName (@if (matchedPathParamPath == "")
    {<text>"@path"</text>}
else
{ <text>`@matchedPathParamPath`</text>},@paramsString@if (hasEndLoadingFn)
{<text>@endLoadingFn</text>}),</text>
<text></text>
}
}
}
}